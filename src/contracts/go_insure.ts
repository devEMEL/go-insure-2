/* eslint-disable */
/**
 * This file was automatically generated by @algorandfoundation/algokit-client-generator.
 * DO NOT MODIFY IT BY HAND.
 * requires: @algorandfoundation/algokit-utils: ^2
 */
import * as algokit from '@algorandfoundation/algokit-utils'
import type {
  ABIAppCallArg,
  AppCallTransactionResult,
  AppCallTransactionResultOfType,
  AppCompilationResult,
  AppReference,
  AppState,
  CoreAppCallArgs,
  RawAppCallArgs,
  TealTemplateParams,
} from '@algorandfoundation/algokit-utils/types/app'
import type {
  AppClientCallCoreParams,
  AppClientCompilationParams,
  AppClientDeployCoreParams,
  AppDetails,
  ApplicationClient,
} from '@algorandfoundation/algokit-utils/types/app-client'
import type { AppSpec } from '@algorandfoundation/algokit-utils/types/app-spec'
import type { SendTransactionResult, TransactionToSign, SendTransactionFrom } from '@algorandfoundation/algokit-utils/types/transaction'
import type { ABIResult, TransactionWithSigner } from 'algosdk'
import { Algodv2, OnApplicationComplete, Transaction, AtomicTransactionComposer, modelsv2 } from 'algosdk'
export const APP_SPEC: AppSpec = {
  "hints": {
    "bootstrap()void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "purchase_policy(pay,string,string,string)void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "approve_claim()void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "reject_claim()void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "get_policy(address)(address,uint64,bool,uint64,uint64,string,uint64,string,string,string)": {
      "structs": {
        "output": {
          "name": "Policy",
          "elements": [
            [
              "customer_address",
              "address"
            ],
            [
              "premium_amount",
              "uint64"
            ],
            [
              "active_status",
              "bool"
            ],
            [
              "registration_date",
              "uint64"
            ],
            [
              "expiration_date",
              "uint64"
            ],
            [
              "claim_status",
              "string"
            ],
            [
              "amount_claimed",
              "uint64"
            ],
            [
              "area",
              "string"
            ],
            [
              "state",
              "string"
            ],
            [
              "country",
              "string"
            ]
          ]
        }
      },
      "call_config": {
        "no_op": "CALL"
      }
    },
    "update_coverage_amount(uint64)void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "update_expiration_timeline(uint64)void": {
      "call_config": {
        "no_op": "CALL"
      }
    }
  },
  "source": {
    "approval": "",
    "clear": "I3ByYWdtYSB2ZXJzaW9uIDgKcHVzaGludCAwIC8vIDAKcmV0dXJu"
  },
  "state": {
    "global": {
      "num_byte_slices": 1,
      "num_uints": 2
    },
    "local": {
      "num_byte_slices": 0,
      "num_uints": 0
    }
  },
  "schema": {
    "global": {
      "declared": {
        "coverage_amount": {
          "type": "uint64",
          "key": "coverage_amount",
          "descr": "This is the coverage amount"
        },
        "insurer": {
          "type": "bytes",
          "key": "insurer",
          "descr": "The insurer address"
        },
        "policy_expiration_date": {
          "type": "uint64",
          "key": "policy_expiration_date",
          "descr": "Expiration of policy. Default is set to yearly."
        }
      },
      "reserved": {}
    },
    "local": {
      "declared": {},
      "reserved": {}
    }
  },
  "contract": {
    "name": "go_insure",
    "methods": [
      {
        "name": "bootstrap",
        "args": [],
        "returns": {
          "type": "void"
        },
        "desc": "Set insurer address to the current app address."
      },
      {
        "name": "purchase_policy",
        "args": [
          {
            "type": "pay",
            "name": "pay_txn"
          },
          {
            "type": "string",
            "name": "area"
          },
          {
            "type": "string",
            "name": "state"
          },
          {
            "type": "string",
            "name": "country"
          }
        ],
        "returns": {
          "type": "void"
        },
        "desc": "Buys a new property policy for an account."
      },
      {
        "name": "approve_claim",
        "args": [],
        "returns": {
          "type": "void"
        },
        "desc": "Approve policy claim"
      },
      {
        "name": "reject_claim",
        "args": [],
        "returns": {
          "type": "void"
        },
        "desc": "Reject a policy claim"
      },
      {
        "name": "get_policy",
        "args": [
          {
            "type": "address",
            "name": "addr"
          }
        ],
        "returns": {
          "type": "(address,uint64,bool,uint64,uint64,string,uint64,string,string,string)"
        },
        "desc": "Gets policy for a specific address"
      },
      {
        "name": "update_coverage_amount",
        "args": [
          {
            "type": "uint64",
            "name": "amt"
          }
        ],
        "returns": {
          "type": "void"
        },
        "desc": "Update policy coverage amount."
      },
      {
        "name": "update_expiration_timeline",
        "args": [
          {
            "type": "uint64",
            "name": "expiration_timeline"
          }
        ],
        "returns": {
          "type": "void"
        },
        "desc": "Update policy expiration timeline."
      }
    ],
    "networks": {},
    "desc": "Insurance dApp"
  },
  "bare_call_config": {
    "no_op": "CREATE"
  }
}

/**
 * Defines an onCompletionAction of 'no_op'
 */
export type OnCompleteNoOp =  { onCompleteAction?: 'no_op' | OnApplicationComplete.NoOpOC }
/**
 * Defines an onCompletionAction of 'opt_in'
 */
export type OnCompleteOptIn =  { onCompleteAction: 'opt_in' | OnApplicationComplete.OptInOC }
/**
 * Defines an onCompletionAction of 'close_out'
 */
export type OnCompleteCloseOut =  { onCompleteAction: 'close_out' | OnApplicationComplete.CloseOutOC }
/**
 * Defines an onCompletionAction of 'delete_application'
 */
export type OnCompleteDelApp =  { onCompleteAction: 'delete_application' | OnApplicationComplete.DeleteApplicationOC }
/**
 * Defines an onCompletionAction of 'update_application'
 */
export type OnCompleteUpdApp =  { onCompleteAction: 'update_application' | OnApplicationComplete.UpdateApplicationOC }
/**
 * A state record containing a single unsigned integer
 */
export type IntegerState = {
  /**
   * Gets the state value as a BigInt 
   */
  asBigInt(): bigint
  /**
   * Gets the state value as a number.
   */
  asNumber(): number
}
/**
 * A state record containing binary data
 */
export type BinaryState = {
  /**
   * Gets the state value as a Uint8Array
   */
  asByteArray(): Uint8Array
  /**
   * Gets the state value as a string
   */
  asString(): string
}

export type AppCreateCallTransactionResult = AppCallTransactionResult & Partial<AppCompilationResult> & AppReference
export type AppUpdateCallTransactionResult = AppCallTransactionResult & Partial<AppCompilationResult>

/**
 * Defines the types of available calls and state of the GoInsure smart contract.
 */
export type GoInsure = {
  /**
   * Maps method signatures / names to their argument and return types.
   */
  methods:
    & Record<'bootstrap()void' | 'bootstrap', {
      argsObj: {
      }
      argsTuple: []
      returns: void
    }>
    & Record<'purchase_policy(pay,string,string,string)void' | 'purchase_policy', {
      argsObj: {
        pay_txn: TransactionToSign | Transaction | Promise<SendTransactionResult>
        area: string
        state: string
        country: string
      }
      argsTuple: [pay_txn: TransactionToSign | Transaction | Promise<SendTransactionResult>, area: string, state: string, country: string]
      returns: void
    }>
    & Record<'approve_claim()void' | 'approve_claim', {
      argsObj: {
      }
      argsTuple: []
      returns: void
    }>
    & Record<'reject_claim()void' | 'reject_claim', {
      argsObj: {
      }
      argsTuple: []
      returns: void
    }>
    & Record<'get_policy(address)(address,uint64,bool,uint64,uint64,string,uint64,string,string,string)' | 'get_policy', {
      argsObj: {
        addr: string
      }
      argsTuple: [addr: string]
      returns: Policy
    }>
    & Record<'update_coverage_amount(uint64)void' | 'update_coverage_amount', {
      argsObj: {
        amt: bigint | number
      }
      argsTuple: [amt: bigint | number]
      returns: void
    }>
    & Record<'update_expiration_timeline(uint64)void' | 'update_expiration_timeline', {
      argsObj: {
        expiration_timeline: bigint | number
      }
      argsTuple: [expiration_timeline: bigint | number]
      returns: void
    }>
  /**
   * Defines the shape of the global and local state of the application.
   */
  state: {
    global: {
      /**
       * This is the coverage amount
       */
      'coverage_amount'?: IntegerState
      /**
       * The insurer address
       */
      'insurer'?: BinaryState
      /**
       * Expiration of policy. Default is set to yearly.
       */
      'policy_expiration_date'?: IntegerState
    }
  }
}
/**
 * Defines the possible abi call signatures
 */
export type GoInsureSig = keyof GoInsure['methods']
/**
 * Defines an object containing all relevant parameters for a single call to the contract. Where TSignature is undefined, a bare call is made
 */
export type TypedCallParams<TSignature extends GoInsureSig | undefined> = {
  method: TSignature
  methodArgs: TSignature extends undefined ? undefined : Array<ABIAppCallArg | undefined>
} & AppClientCallCoreParams & CoreAppCallArgs
/**
 * Defines the arguments required for a bare call
 */
export type BareCallArgs = Omit<RawAppCallArgs, keyof CoreAppCallArgs>
/**
 * Represents a Policy result as a struct
 */
export type Policy = {
  customer_address: string
  premium_amount: bigint
  active_status: boolean
  registration_date: bigint
  expiration_date: bigint
  claim_status: string
  amount_claimed: bigint
  area: string
  state: string
  country: string
}
/**
 * Converts the tuple representation of a Policy to the struct representation
 */
export function Policy([customer_address, premium_amount, active_status, registration_date, expiration_date, claim_status, amount_claimed, area, state, country]: [string, bigint, boolean, bigint, bigint, string, bigint, string, string, string] ) {
  return {
    customer_address,
    premium_amount,
    active_status,
    registration_date,
    expiration_date,
    claim_status,
    amount_claimed,
    area,
    state,
    country,
  }
}
/**
 * Maps a method signature from the GoInsure smart contract to the method's arguments in either tuple of struct form
 */
export type MethodArgs<TSignature extends GoInsureSig> = GoInsure['methods'][TSignature]['argsObj' | 'argsTuple']
/**
 * Maps a method signature from the GoInsure smart contract to the method's return type
 */
export type MethodReturn<TSignature extends GoInsureSig> = GoInsure['methods'][TSignature]['returns']

/**
 * A factory for available 'create' calls
 */
export type GoInsureCreateCalls = (typeof GoInsureCallFactory)['create']
/**
 * Defines supported create methods for this smart contract
 */
export type GoInsureCreateCallParams =
  | (TypedCallParams<undefined> & (OnCompleteNoOp))
/**
 * Defines arguments required for the deploy method.
 */
export type GoInsureDeployArgs = {
  deployTimeParams?: TealTemplateParams
  /**
   * A delegate which takes a create call factory and returns the create call params for this smart contract
   */
  createCall?: (callFactory: GoInsureCreateCalls) => GoInsureCreateCallParams
}


/**
 * Exposes methods for constructing all available smart contract calls
 */
export abstract class GoInsureCallFactory {
  /**
   * Gets available create call factories
   */
  static get create() {
    return {
      /**
       * Constructs a create call for the go_insure smart contract using a bare call
       *
       * @param params Any parameters for the call
       * @returns A TypedCallParams object for the call
       */
      bare(params: BareCallArgs & AppClientCallCoreParams & CoreAppCallArgs & AppClientCompilationParams & (OnCompleteNoOp) = {}) {
        return {
          method: undefined,
          methodArgs: undefined,
          ...params,
        }
      },
    }
  }

  /**
   * Constructs a no op call for the bootstrap()void ABI method
   *
   * Set insurer address to the current app address.
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static bootstrap(args: MethodArgs<'bootstrap()void'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'bootstrap()void' as const,
      methodArgs: Array.isArray(args) ? args : [],
      ...params,
    }
  }
  /**
   * Constructs a no op call for the purchase_policy(pay,string,string,string)void ABI method
   *
   * Buys a new property policy for an account.
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static purchasePolicy(args: MethodArgs<'purchase_policy(pay,string,string,string)void'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'purchase_policy(pay,string,string,string)void' as const,
      methodArgs: Array.isArray(args) ? args : [args.pay_txn, args.area, args.state, args.country],
      ...params,
    }
  }
  /**
   * Constructs a no op call for the approve_claim()void ABI method
   *
   * Approve policy claim
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static approveClaim(args: MethodArgs<'approve_claim()void'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'approve_claim()void' as const,
      methodArgs: Array.isArray(args) ? args : [],
      ...params,
    }
  }
  /**
   * Constructs a no op call for the reject_claim()void ABI method
   *
   * Reject a policy claim
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static rejectClaim(args: MethodArgs<'reject_claim()void'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'reject_claim()void' as const,
      methodArgs: Array.isArray(args) ? args : [],
      ...params,
    }
  }
  /**
   * Constructs a no op call for the get_policy(address)(address,uint64,bool,uint64,uint64,string,uint64,string,string,string) ABI method
   *
   * Gets policy for a specific address
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static getPolicy(args: MethodArgs<'get_policy(address)(address,uint64,bool,uint64,uint64,string,uint64,string,string,string)'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'get_policy(address)(address,uint64,bool,uint64,uint64,string,uint64,string,string,string)' as const,
      methodArgs: Array.isArray(args) ? args : [args.addr],
      ...params,
    }
  }
  /**
   * Constructs a no op call for the update_coverage_amount(uint64)void ABI method
   *
   * Update policy coverage amount.
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static updateCoverageAmount(args: MethodArgs<'update_coverage_amount(uint64)void'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'update_coverage_amount(uint64)void' as const,
      methodArgs: Array.isArray(args) ? args : [args.amt],
      ...params,
    }
  }
  /**
   * Constructs a no op call for the update_expiration_timeline(uint64)void ABI method
   *
   * Update policy expiration timeline.
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static updateExpirationTimeline(args: MethodArgs<'update_expiration_timeline(uint64)void'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'update_expiration_timeline(uint64)void' as const,
      methodArgs: Array.isArray(args) ? args : [args.expiration_timeline],
      ...params,
    }
  }
}

/**
 * A client to make calls to the go_insure smart contract
 */
export class GoInsureClient {
  /**
   * The underlying `ApplicationClient` for when you want to have more flexibility
   */
  public readonly appClient: ApplicationClient

  private readonly sender: SendTransactionFrom | undefined

  /**
   * Creates a new instance of `GoInsureClient`
   *
   * @param appDetails appDetails The details to identify the app to deploy
   * @param algod An algod client instance
   */
  constructor(appDetails: AppDetails, private algod: Algodv2) {
    this.sender = appDetails.sender
    this.appClient = algokit.getAppClient({
      ...appDetails,
      app: APP_SPEC
    }, algod)
  }

  /**
   * Checks for decode errors on the AppCallTransactionResult and maps the return value to the specified generic type
   *
   * @param result The AppCallTransactionResult to be mapped
   * @param returnValueFormatter An optional delegate to format the return value if required
   * @returns The smart contract response with an updated return value
   */
  protected mapReturnValue<TReturn, TResult extends AppCallTransactionResult = AppCallTransactionResult>(result: AppCallTransactionResult, returnValueFormatter?: (value: any) => TReturn): AppCallTransactionResultOfType<TReturn> & TResult {
    if(result.return?.decodeError) {
      throw result.return.decodeError
    }
    const returnValue = result.return?.returnValue !== undefined && returnValueFormatter !== undefined
      ? returnValueFormatter(result.return.returnValue)
      : result.return?.returnValue as TReturn | undefined
      return { ...result, return: returnValue } as AppCallTransactionResultOfType<TReturn> & TResult
  }

  /**
   * Calls the ABI method with the matching signature using an onCompletion code of NO_OP
   *
   * @param typedCallParams An object containing the method signature, args, and any other relevant parameters
   * @param returnValueFormatter An optional delegate which when provided will be used to map non-undefined return values to the target type
   * @returns The result of the smart contract call
   */
  public async call<TSignature extends keyof GoInsure['methods']>(typedCallParams: TypedCallParams<TSignature>, returnValueFormatter?: (value: any) => MethodReturn<TSignature>) {
    return this.mapReturnValue<MethodReturn<TSignature>>(await this.appClient.call(typedCallParams), returnValueFormatter)
  }

  /**
   * Idempotently deploys the go_insure smart contract.
   *
   * @param params The arguments for the contract calls and any additional parameters for the call
   * @returns The deployment result
   */
  public deploy(params: GoInsureDeployArgs & AppClientDeployCoreParams = {}): ReturnType<ApplicationClient['deploy']> {
    const createArgs = params.createCall?.(GoInsureCallFactory.create)
    return this.appClient.deploy({
      ...params,
      createArgs,
      createOnCompleteAction: createArgs?.onCompleteAction,
    })
  }

  /**
   * Gets available create methods
   */
  public get create() {
    const $this = this
    return {
      /**
       * Creates a new instance of the go_insure smart contract using a bare call.
       *
       * @param args The arguments for the bare call
       * @returns The create result
       */
      async bare(args: BareCallArgs & AppClientCallCoreParams & AppClientCompilationParams & CoreAppCallArgs & (OnCompleteNoOp) = {}) {
        return $this.mapReturnValue<undefined, AppCreateCallTransactionResult>(await $this.appClient.create(args))
      },
    }
  }

  /**
   * Makes a clear_state call to an existing instance of the go_insure smart contract.
   *
   * @param args The arguments for the bare call
   * @returns The clear_state result
   */
  public clearState(args: BareCallArgs & AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.appClient.clearState(args)
  }

  /**
   * Calls the bootstrap()void ABI method.
   *
   * Set insurer address to the current app address.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public bootstrap(args: MethodArgs<'bootstrap()void'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(GoInsureCallFactory.bootstrap(args, params))
  }

  /**
   * Calls the purchase_policy(pay,string,string,string)void ABI method.
   *
   * Buys a new property policy for an account.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public purchasePolicy(args: MethodArgs<'purchase_policy(pay,string,string,string)void'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(GoInsureCallFactory.purchasePolicy(args, params))
  }

  /**
   * Calls the approve_claim()void ABI method.
   *
   * Approve policy claim
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public approveClaim(args: MethodArgs<'approve_claim()void'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(GoInsureCallFactory.approveClaim(args, params))
  }

  /**
   * Calls the reject_claim()void ABI method.
   *
   * Reject a policy claim
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public rejectClaim(args: MethodArgs<'reject_claim()void'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(GoInsureCallFactory.rejectClaim(args, params))
  }

  /**
   * Calls the get_policy(address)(address,uint64,bool,uint64,uint64,string,uint64,string,string,string) ABI method.
   *
   * Gets policy for a specific address
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public getPolicy(args: MethodArgs<'get_policy(address)(address,uint64,bool,uint64,uint64,string,uint64,string,string,string)'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(GoInsureCallFactory.getPolicy(args, params), Policy)
  }

  /**
   * Calls the update_coverage_amount(uint64)void ABI method.
   *
   * Update policy coverage amount.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public updateCoverageAmount(args: MethodArgs<'update_coverage_amount(uint64)void'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(GoInsureCallFactory.updateCoverageAmount(args, params))
  }

  /**
   * Calls the update_expiration_timeline(uint64)void ABI method.
   *
   * Update policy expiration timeline.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public updateExpirationTimeline(args: MethodArgs<'update_expiration_timeline(uint64)void'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(GoInsureCallFactory.updateExpirationTimeline(args, params))
  }

  /**
   * Extracts a binary state value out of an AppState dictionary
   *
   * @param state The state dictionary containing the state value
   * @param key The key of the state value
   * @returns A BinaryState instance containing the state value, or undefined if the key was not found
   */
  private static getBinaryState(state: AppState, key: string): BinaryState | undefined {
    const value = state[key]
    if (!value) return undefined
    if (!('valueRaw' in value))
      throw new Error(`Failed to parse state value for ${key}; received an int when expected a byte array`)
    return {
      asString(): string {
        return value.value
      },
      asByteArray(): Uint8Array {
        return value.valueRaw
      }
    }
  }

  /**
   * Extracts a integer state value out of an AppState dictionary
   *
   * @param state The state dictionary containing the state value
   * @param key The key of the state value
   * @returns An IntegerState instance containing the state value, or undefined if the key was not found
   */
  private static getIntegerState(state: AppState, key: string): IntegerState | undefined {
    const value = state[key]
    if (!value) return undefined
    if ('valueRaw' in value)
      throw new Error(`Failed to parse state value for ${key}; received a byte array when expected a number`)
    return {
      asBigInt() {
        return typeof value.value === 'bigint' ? value.value : BigInt(value.value)
      },
      asNumber(): number {
        return typeof value.value === 'bigint' ? Number(value.value) : value.value
      },
    }
  }

  /**
   * Returns the smart contract's global state wrapped in a strongly typed accessor with options to format the stored value
   */
  public async getGlobalState(): Promise<GoInsure['state']['global']> {
    const state = await this.appClient.getGlobalState()
    return {
      get coverage_amount() {
        return GoInsureClient.getIntegerState(state, 'coverage_amount')
      },
      get insurer() {
        return GoInsureClient.getBinaryState(state, 'insurer')
      },
      get policy_expiration_date() {
        return GoInsureClient.getIntegerState(state, 'policy_expiration_date')
      },
    }
  }

  public compose(): GoInsureComposer {
    const client = this
    const atc = new AtomicTransactionComposer()
    let promiseChain:Promise<unknown> = Promise.resolve()
    const resultMappers: Array<undefined | ((x: any) => any)> = []
    return {
      bootstrap(args: MethodArgs<'bootstrap()void'>, params?: AppClientCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.bootstrap(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      purchasePolicy(args: MethodArgs<'purchase_policy(pay,string,string,string)void'>, params?: AppClientCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.purchasePolicy(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      approveClaim(args: MethodArgs<'approve_claim()void'>, params?: AppClientCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.approveClaim(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      rejectClaim(args: MethodArgs<'reject_claim()void'>, params?: AppClientCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.rejectClaim(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      getPolicy(args: MethodArgs<'get_policy(address)(address,uint64,bool,uint64,uint64,string,uint64,string,string,string)'>, params?: AppClientCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.getPolicy(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(Policy)
        return this
      },
      updateCoverageAmount(args: MethodArgs<'update_coverage_amount(uint64)void'>, params?: AppClientCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.updateCoverageAmount(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      updateExpirationTimeline(args: MethodArgs<'update_expiration_timeline(uint64)void'>, params?: AppClientCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.updateExpirationTimeline(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      clearState(args?: BareCallArgs & AppClientCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.clearState({...args, sendParams: {...args?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      addTransaction(txn: TransactionWithSigner | TransactionToSign | Transaction | Promise<SendTransactionResult>, defaultSender?: SendTransactionFrom) {
        promiseChain = promiseChain.then(async () => atc.addTransaction(await algokit.getTransactionWithSigner(txn, defaultSender ?? client.sender)))
        return this
      },
      async atc() {
        await promiseChain
        return atc
      },
      async simulate(options?: SimulateOptions) {
        await promiseChain
        const result = await atc.simulate(client.algod, new modelsv2.SimulateRequest({ txnGroups: [], ...options }))
        return {
          ...result,
          returns: result.methodResults?.map((val, i) => resultMappers[i] !== undefined ? resultMappers[i]!(val.returnValue) : val.returnValue)
        }
      },
      async execute() {
        await promiseChain
        const result = await algokit.sendAtomicTransactionComposer({ atc, sendParams: {} }, client.algod)
        return {
          ...result,
          returns: result.returns?.map((val, i) => resultMappers[i] !== undefined ? resultMappers[i]!(val.returnValue) : val.returnValue)
        }
      }
    } as unknown as GoInsureComposer
  }
}
export type GoInsureComposer<TReturns extends [...any[]] = []> = {
  /**
   * Calls the bootstrap()void ABI method.
   *
   * Set insurer address to the current app address.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  bootstrap(args: MethodArgs<'bootstrap()void'>, params?: AppClientCallCoreParams & CoreAppCallArgs): GoInsureComposer<[...TReturns, MethodReturn<'bootstrap()void'>]>

  /**
   * Calls the purchase_policy(pay,string,string,string)void ABI method.
   *
   * Buys a new property policy for an account.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  purchasePolicy(args: MethodArgs<'purchase_policy(pay,string,string,string)void'>, params?: AppClientCallCoreParams & CoreAppCallArgs): GoInsureComposer<[...TReturns, MethodReturn<'purchase_policy(pay,string,string,string)void'>]>

  /**
   * Calls the approve_claim()void ABI method.
   *
   * Approve policy claim
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  approveClaim(args: MethodArgs<'approve_claim()void'>, params?: AppClientCallCoreParams & CoreAppCallArgs): GoInsureComposer<[...TReturns, MethodReturn<'approve_claim()void'>]>

  /**
   * Calls the reject_claim()void ABI method.
   *
   * Reject a policy claim
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  rejectClaim(args: MethodArgs<'reject_claim()void'>, params?: AppClientCallCoreParams & CoreAppCallArgs): GoInsureComposer<[...TReturns, MethodReturn<'reject_claim()void'>]>

  /**
   * Calls the get_policy(address)(address,uint64,bool,uint64,uint64,string,uint64,string,string,string) ABI method.
   *
   * Gets policy for a specific address
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  getPolicy(args: MethodArgs<'get_policy(address)(address,uint64,bool,uint64,uint64,string,uint64,string,string,string)'>, params?: AppClientCallCoreParams & CoreAppCallArgs): GoInsureComposer<[...TReturns, MethodReturn<'get_policy(address)(address,uint64,bool,uint64,uint64,string,uint64,string,string,string)'>]>

  /**
   * Calls the update_coverage_amount(uint64)void ABI method.
   *
   * Update policy coverage amount.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  updateCoverageAmount(args: MethodArgs<'update_coverage_amount(uint64)void'>, params?: AppClientCallCoreParams & CoreAppCallArgs): GoInsureComposer<[...TReturns, MethodReturn<'update_coverage_amount(uint64)void'>]>

  /**
   * Calls the update_expiration_timeline(uint64)void ABI method.
   *
   * Update policy expiration timeline.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  updateExpirationTimeline(args: MethodArgs<'update_expiration_timeline(uint64)void'>, params?: AppClientCallCoreParams & CoreAppCallArgs): GoInsureComposer<[...TReturns, MethodReturn<'update_expiration_timeline(uint64)void'>]>

  /**
   * Makes a clear_state call to an existing instance of the go_insure smart contract.
   *
   * @param args The arguments for the bare call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  clearState(args?: BareCallArgs & AppClientCallCoreParams & CoreAppCallArgs): GoInsureComposer<[...TReturns, undefined]>

  /**
   * Adds a transaction to the composer
   *
   * @param txn One of: A TransactionWithSigner object (returned as is), a TransactionToSign object (signer is obtained from the signer property), a Transaction object (signer is extracted from the defaultSender parameter), an async SendTransactionResult returned by one of algokit utils helpers (signer is obtained from the defaultSender parameter)
   * @param defaultSender The default sender to be used to obtain a signer where the object provided to the transaction parameter does not include a signer.
   */
  addTransaction(txn: TransactionWithSigner | TransactionToSign | Transaction | Promise<SendTransactionResult>, defaultSender?: SendTransactionFrom): GoInsureComposer<TReturns>
  /**
   * Returns the underlying AtomicTransactionComposer instance
   */
  atc(): Promise<AtomicTransactionComposer>
  /**
   * Simulates the transaction group and returns the result
   */
  simulate(options?: SimulateOptions): Promise<GoInsureComposerSimulateResult<TReturns>>
  /**
   * Executes the transaction group and returns the results
   */
  execute(): Promise<GoInsureComposerResults<TReturns>>
}
export type SimulateOptions = Omit<ConstructorParameters<typeof modelsv2.SimulateRequest>[0], 'txnGroups'>
export type GoInsureComposerSimulateResult<TReturns extends [...any[]]> = {
  returns: TReturns
  methodResults: ABIResult[]
  simulateResponse: modelsv2.SimulateResponse
}
export type GoInsureComposerResults<TReturns extends [...any[]]> = {
  returns: TReturns
  groupId: string
  txIds: string[]
  transactions: Transaction[]
}
